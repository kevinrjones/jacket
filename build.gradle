buildscript {
    ext {
        springBootVersion = '1.3.2.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'com.h2database:h2:1.4.187'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
	}
}

plugins {
  id 'org.unbroken-dome.test-sets' version '1.2.0'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'eclipse-wtp'
  apply plugin: 'idea'
  apply plugin: 'io.spring.dependency-management' 
  
  version = '0.1-SNAPSHOT'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  
  repositories {
    jcenter()
  }

  idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
  }
  
  dependencies {
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'junit:junit:4.+'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'commons-logging:commons-logging:1.2'

    compile 'commons-logging:commons-logging:1.2'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'org.hibernate:hibernate-validator:5.2.2.Final'

  }
}


project(':JacketImage') {
}

project(':JacketSecurity') {
    dependencies {
      compile project(':JacketRepository')
    }
}

project(':JacketArticles') {
    dependencies {
      compile project(':JacketRepository')
      compile project(':JacketSecurity')
      compile project(':JacketImage')
    }
}

project(':JacketWeb') {
    dependencies {
      compile project(':JacketSecurity')
      compile project(':JacketArticles')
      compile project(':JacketImage')
    }
}

def mysqlUser = ""
def mysqlPassword = ""

if(project.hasProperty('mysql_user')) {
	mysqlUser = project.mysql_user
} else {
    logger.error("mysql_user not set. Please add a USER_HOME/.gradle/gradle.properties and add a mysql_user value") 
}

if(project.hasProperty('jacket_password')) {
	mysqlPassword = project.jacket_password
} else {
    mysqlPassword = System.getenv("jacket_password") 
}

[ "JacketRepository", "JacketWeb", "JacketSecurity", "JacketArticles"].each { name ->
  project(":$name") { 
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'org.flywaydb.flyway'
	
    testSets {
      integrationTest {
	    dirName = 'integration-test'
      }
    }
    
    task migrateTest {
		group = "test"
		description = "Run migration scripts for test"
		doFirst {			
			 flyway {
			    url = 'jdbc:mysql://localhost:3306/jackettest?useSSL=false'
			    user = mysqlUser
			    password = mysqlPassword
			    schemas = ['jackettest']
			    locations = ["filesystem:${projectDir}/../migrations/common", "filesystem:${projectDir}/../migrations/mysql"]
			    sqlMigrationPrefix = ""
			    baselineOnMigrate = true
			    outOfOrder = true
			}
		}
	}
    
		
    migrateTest.finalizedBy flywayMigrate  
	migrateTest.finalizedBy flywayClean
	  
	flywayMigrate.dependsOn flywayClean

    check.dependsOn integrationTest
	integrationTest.dependsOn migrateTest

    integrationTest.mustRunAfter test
	integrationTest.description = "Runs integration tests"

    
    tasks.withType(Test) {
      reports.html.destination = file("${reporting.baseDir}/${it.name}")
    }
  }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

