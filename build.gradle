buildscript {
    ext {
        springBootVersion = '2.2.7.RELEASE'
        hamcrestCoreVersion = '2.2'
        mockitoCoreVersion = '3.3.3'
        commonsLoggingVersion = '1.2'
        log4JVersion = '1.2.17'
        validationApiVersion = '2.0.1.Final'
        hibernateValidatorVersion = '6.1.5.Final'
        hibernateJpaVersion = '1.0.0.Final'
        mysqlConnectorVersion = '8.0.19'
        javaxInjectVersion = '1'
        commonsLoggingVersion = '1.2'
        assertJVersion = '3.16.1'
    }
    repositories {
        jcenter()
    }
    dependencies {

    }
}

plugins {
    id "org.flywaydb.flyway" version "6.4.1" apply false
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id "io.spring.dependency-management" version "1.0.9.RELEASE" apply false
    id "org.springframework.boot" version "2.2.7.RELEASE"
}

bootJar {
    enabled = false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    version = '0.5-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        jcenter()
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("$buildDir/classes/main/")
        }
    }

    dependencies {
        testImplementation "junit:junit:4.+"
        testImplementation "org.hamcrest:hamcrest-core:$hamcrestCoreVersion"
        testImplementation "org.hamcrest:hamcrest-library:$hamcrestCoreVersion"
        testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
        testImplementation "org.assertj:assertj-core:$assertJVersion"


        implementation "commons-logging:commons-logging:$commonsLoggingVersion"
        implementation "log4j:log4j:$log4JVersion"
        implementation "javax.validation:validation-api:$validationApiVersion"
        implementation "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
        implementation "javax.inject:javax.inject:$javaxInjectVersion"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    }
}


project(':JacketEntities') {
}

project(':JacketImage') {
}

project(':JacketSecurity') {
    dependencies {
        implementation project(':JacketEntities')
    }
}

project(':JacketArticles') {
    dependencies {
        implementation project(':JacketEntities')
        implementation project(':JacketSecurity')
        implementation project(':JacketImage')
    }
}

project(':JacketWeb') {
    dependencies {
        implementation project(':JacketArticles')
        implementation project(':JacketSecurity')
        implementation project(':JacketImage')
    }
}

def mysqlUser = ""
def mysqlPassword = ""

if (project.hasProperty('mysql_user')) {
    mysqlUser = project.mysql_user
} else {
    logger.error("mysql_user not set. Please add a USER_HOME/.gradle/gradle.properties and add a mysql_user value")
}

if (project.hasProperty('jacket_password')) {
    mysqlPassword = project.jacket_password
} else {
    mysqlPassword = System.getenv("jacket_password")
}

["JacketEntities", "JacketWeb", "JacketSecurity", "JacketArticles"].each { name ->
    project(":$name") {
        apply plugin: 'org.unbroken-dome.test-sets'
        apply plugin: 'org.flywaydb.flyway'

        testSets {
            integrationTest {
                dirName = 'integration-test'
            }
        }

        task migrateTest {
            group = "test"
            description = "Run migration scripts for test"
            doFirst {
                flyway {
                    url = 'jdbc:mysql://localhost:3306/jackettest?useSSL=false'
                    user = mysqlUser
                    password = mysqlPassword
                    schemas = ['jackettest']
                    locations = ["filesystem:${projectDir}/../migrations/common", "filesystem:${projectDir}/../migrations/mysql"]
                    sqlMigrationPrefix = ""
                    baselineOnMigrate = true
                    outOfOrder = true
                }
            }
        }

        migrateTest.finalizedBy flywayMigrate
        migrateTest.finalizedBy flywayClean

        flywayMigrate.dependsOn flywayClean

        check.dependsOn integrationTest
        integrationTest.dependsOn migrateTest

        integrationTest.mustRunAfter test
        integrationTest.description = "Runs integration tests"

        tasks.withType(Test) {
            reports.html.destination = file("${reporting.baseDir}/${it.name}")
        }

        flyway {
            url = 'jdbc:mysql://localhost:3306/jacket?useSSL=false'
            user = mysqlUser
            password =  mysqlPassword
            schemas = ['jacket']
            locations = ["filesystem:${projectDir}/../migrations/common", "filesystem:${projectDir}/../migrations/mysql"]
            sqlMigrationPrefix = ""
            baselineOnMigrate = true
            outOfOrder = true
        }
    }
}





